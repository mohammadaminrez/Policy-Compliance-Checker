import { useState, useEffect } from 'react';
import { api } from '../services/api';

interface EvaluationResult {
  user_data: any;
  all_passed: boolean;
  total_policies: number;
  passed_policies: number;
  failed_policies: number;
  policies_evaluated: Array<{
    policy: any;
    passed: boolean;
    details: any;
  }>;
  failed_conditions?: Array<{
    field: string;
    operator: string;
    expected: any;
    actual: any;
  }>;
}

export const Results = () => {
  const [results, setResults] = useState<EvaluationResult[]>([]);
  const [evaluating, setEvaluating] = useState(false);
  const [error, setError] = useState('');
  const [filter, setFilter] = useState<'all' | 'passed' | 'failed'>('all');
  const [expandedRow, setExpandedRow] = useState<number | null>(null);

  const [policies, setPolicies] = useState<any[]>([]);
  const [userFiles, setUserFiles] = useState<any[]>([]);
  const [selectedPolicies, setSelectedPolicies] = useState<number[]>([]);
  const [selectedUsers, setSelectedUsers] = useState<number[]>([]);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      const [policiesData, usersData] = await Promise.all([
        api.getPolicies(),
        api.getUsers()
      ]);
      setPolicies(policiesData);
      setUserFiles(usersData);
      setSelectedPolicies(policiesData.map((p: any) => p.id));
      setSelectedUsers(usersData.map((u: any) => u.id));
    } catch (err) {
      console.error('Failed to load data', err);
    }
  };

  const handlePolicyToggle = (id: number) => {
    setSelectedPolicies(prev =>
      prev.includes(id) ? prev.filter(p => p !== id) : [...prev, id]
    );
  };

  const handleUserToggle = (id: number) => {
    setSelectedUsers(prev =>
      prev.includes(id) ? prev.filter(u => u !== id) : [...prev, id]
    );
  };

  const handleSelectAllPolicies = () => {
    setSelectedPolicies(selectedPolicies.length === policies.length ? [] : policies.map(p => p.id));
  };

  const handleSelectAllUsers = () => {
    setSelectedUsers(selectedUsers.length === userFiles.length ? [] : userFiles.map(u => u.id));
  };

  const handleEvaluate = async () => {
    if (selectedPolicies.length === 0 || selectedUsers.length === 0) {
      setError('Please select at least one policy and one user file');
      return;
    }

    setEvaluating(true);
    setError('');
    setResults([]);

    try {
      const data = await api.evaluateByIds(selectedPolicies, selectedUsers);
      setResults(data.results || []);
    } catch (err: any) {
      setError(err.response?.data?.detail || 'Evaluation failed');
    } finally {
      setEvaluating(false);
    }
  };

  const getUserLabel = (result: EvaluationResult) => {
    const userData = result.user_data;
    return userData.user_id || userData.id || userData.email || userData.name || 'User';
  };

  const filteredResults = results.filter(r => {
    if (filter === 'passed') return r.all_passed;
    if (filter === 'failed') return !r.all_passed;
    return true;
  });

  const passedCount = results.filter(r => r.all_passed).length;
  const failedCount = results.filter(r => !r.all_passed).length;

  return (
    <div className="results-container">
      <h2>Evaluate Compliance</h2>

      {(policies.length === 0 || userFiles.length === 0) && (
        <div className="empty-state">
          <p>Please upload policies and user data first.</p>
        </div>
      )}

      {policies.length > 0 && userFiles.length > 0 && (
        <div className="selection-section">
          <div className="selection-column">
            <div className="selection-header">
              <h3>Select Policies</h3>
              <button className="btn-select-all" onClick={handleSelectAllPolicies}>
                {selectedPolicies.length === policies.length ? 'Deselect All' : 'Select All'}
              </button>
            </div>
            <div className="selection-list">
              {policies.map(policy => (
                <label key={policy.id} className="checkbox-item">
                  <input
                    type="checkbox"
                    checked={selectedPolicies.includes(policy.id)}
                    onChange={() => handlePolicyToggle(policy.id)}
                  />
                  <span>{policy.name}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="selection-column">
            <div className="selection-header">
              <h3>Select User Files</h3>
              <button className="btn-select-all" onClick={handleSelectAllUsers}>
                {selectedUsers.length === userFiles.length ? 'Deselect All' : 'Select All'}
              </button>
            </div>
            <div className="selection-list">
              {userFiles.map(userFile => (
                <label key={userFile.id} className="checkbox-item">
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(userFile.id)}
                    onChange={() => handleUserToggle(userFile.id)}
                  />
                  <span>{userFile.filename} ({userFile.count} users)</span>
                </label>
              ))}
            </div>
          </div>
        </div>
      )}

      {policies.length > 0 && userFiles.length > 0 && (
        <button
          className="btn-evaluate-large"
          onClick={handleEvaluate}
          disabled={evaluating || selectedPolicies.length === 0 || selectedUsers.length === 0}
        >
          {evaluating ? 'Evaluating...' : 'Evaluate'}
        </button>
      )}

      {error && <div className="message error">{error}</div>}

      {results.length > 0 && (
        <>
          <div className="results-summary">
            <div className="stat">
              <span className="stat-label">Total Users:</span>
              <span className="stat-value">{results.length}</span>
            </div>
            <div className="stat success">
              <span className="stat-label">Passed:</span>
              <span className="stat-value">{passedCount}</span>
            </div>
            <div className="stat error">
              <span className="stat-label">Failed:</span>
              <span className="stat-value">{failedCount}</span>
            </div>
          </div>

          <div className="controls">
            <div className="filter-group">
              <label>Filter:</label>
              <button
                className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
                onClick={() => setFilter('all')}
              >
                All
              </button>
              <button
                className={`filter-btn ${filter === 'passed' ? 'active' : ''}`}
                onClick={() => setFilter('passed')}
              >
                Passed
              </button>
              <button
                className={`filter-btn ${filter === 'failed' ? 'active' : ''}`}
                onClick={() => setFilter('failed')}
              >
                Failed
              </button>
            </div>
          </div>

          <div className="simple-results-list">
            {filteredResults.map((result, index) => (
              <div
                key={index}
                className={`result-card ${result.all_passed ? 'passed' : 'failed'}`}
              >
                <div className="result-header">
                  <div className="result-info">
                    <span className="result-user">
                      <strong>User:</strong> {getUserLabel(result)}
                    </span>
                    <span className="result-policy">
                      <strong>Policies Evaluated:</strong> {result.total_policies}
                      {' '}({result.passed_policies} passed, {result.failed_policies} failed)
                    </span>
                  </div>
                  <div className="result-status-container">
                    <span className={`result-status ${result.all_passed ? 'passed' : 'failed'}`}>
                      {result.all_passed ? '✓ ALL PASSED' : '✗ FAILED'}
                    </span>
                    <button
                      className="btn-details"
                      onClick={() => setExpandedRow(expandedRow === index ? null : index)}
                    >
                      {expandedRow === index ? 'Hide Details' : 'Show Details'}
                    </button>
                  </div>
                </div>

                {!result.all_passed && result.failed_conditions && result.failed_conditions.length > 0 && (
                  <div className="result-failures">
                    <strong>Failed Conditions ({result.failed_conditions.length}):</strong>
                    <ul>
                      {result.failed_conditions.slice(0, 5).map((cond, i) => (
                        <li key={i}>
                          <code>{cond.field}</code> {cond.operator} <code>{JSON.stringify(cond.expected)}</code>
                          {' '}(got: <code>{JSON.stringify(cond.actual)}</code>)
                        </li>
                      ))}
                      {result.failed_conditions.length > 5 && (
                        <li className="more-failures">
                          + {result.failed_conditions.length - 5} more failures
                        </li>
                      )}
                    </ul>
                  </div>
                )}

                {expandedRow === index && (
                  <div className="result-details">
                    <div className="detail-section">
                      <h4>User Data:</h4>
                      <pre>{JSON.stringify(result.user_data, null, 2)}</pre>
                    </div>

                    <div className="detail-section">
                      <h4>Policy Results ({result.policies_evaluated.length}):</h4>
                      {result.policies_evaluated.map((policyResult, pIdx) => (
                        <div key={pIdx} className={`policy-result ${policyResult.passed ? 'passed' : 'failed'}`}>
                          <div className="policy-result-header">
                            <strong>Policy #{pIdx + 1}:</strong> {policyResult.policy.name || policyResult.policy.title || 'Unnamed Policy'}
                            <span className={`policy-status ${policyResult.passed ? 'passed' : 'failed'}`}>
                              {policyResult.passed ? '✓' : '✗'}
                            </span>
                          </div>
                          <pre>{JSON.stringify(policyResult.policy, null, 2)}</pre>
                        </div>
                      ))}
                    </div>

                    {result.failed_conditions && result.failed_conditions.length > 5 && (
                      <div className="detail-section">
                        <h4>All Failed Conditions ({result.failed_conditions.length}):</h4>
                        <ul>
                          {result.failed_conditions.map((cond, i) => (
                            <li key={i}>
                              <code>{cond.field}</code> {cond.operator} <code>{JSON.stringify(cond.expected)}</code>
                              {' '}(actual: <code>{JSON.stringify(cond.actual)}</code>)
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                  </div>
                )}
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
};
